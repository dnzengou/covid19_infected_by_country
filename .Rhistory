setNames(c("t", "S", "I","R")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
ode_solution_daily <- ode_solution %>%
filter(t %in% seq(0, max_time, by = 1)) %>%
mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)
## The epidemic curve of new infections per day is shown below:
df_plot <- ode_solution_daily %>% select(t, c) %>%
pivot_longer(-t, names_to= "Quantity", values_to = "Proportion")
#ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() +
#  xlab("Time (days)") + ylab("Daily new cases (as proportion of the population)") + scale_y_continuous(labels=scales::percent)
ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() +
xlab("Time(d)") + ylab("Daily new cases (%SW pop.)") + scale_y_continuous(labels=scales::percent)
# Function to compute the final size.
s_inf <- function(R0) {
f_target <- function(x) { x - exp(-R0*(1-x)) }
result <- uniroot(f_target, lower=1e-12, upper=1-1e-12)$root
return(result)
}
# Final proportion of infected.
1 - s_inf(R0)
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
# general optimazion nethod based on Nelder-Mead
# https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
print(Opt_par)
# Grid where to evaluate
max_time <- 300 # here predictions up to 150 days, i.e + (length(Day)-max_time) beyond length(Day)
times <- seq(0, max_time, by=0.01)
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
#fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
fit <- data.frame(ode(y = init, times = times, func = SIR, parms = Opt_par))
col <- 1:3 # colour
print(fit)
## We can use the above equation to verify that the larger $R_0$, the larger is the final size of the outbreak:
R0_grid <- c(1.25, 1.5, 1.75,2, 2.25, 2.5, 3)
map_dbl( R0_grid, ~ 1-s_inf(.x)) %>% setNames(R0_grid) %>% scales::percent(accuracy=1)
map_dbl( R0_grid, ~ 1-s_inf(.x)) %>% setNames(R0_grid) %>% scales::percent(accuracy=1)
# BE #Note. count starting as of march 1st when cases>1
Infected <- c(2,8,13,23,50,109,169,200,239,267,314,314,559,689,886,1058,1243,1486,1795,2257,2815,3401,3743,4269,4937,6235,7284,9134,10836,11899,12775,13964,15348,16770,18431,19691,20814,22194,23403,24983,26667,28018,29647,30589,31119,33573,34809,36138,37183,38496,39983,40956,41889,42797,44293,45325,46134,46687,47334,47859,48519,49032)
Day <- 1:(length(Infected)) # length of the infection period
#N <- 66000000 # pupulation of the UK
#N <- 10230000 # pupulation of the SW
#N <- 66990000 # pupulation of the FR
#N <- 32820000 # pupulation of the US
N <- 11460000 # pupulation of the BE
# Plot coutnry's confirmed cases
old <- par(mfrow = c(1, 2))
#plot(Day, Infected, type ="b") # bubbles
plot(Day, Infected, type ="b")
plot(Day, Infected, log = "y") # type b by default
abline(lm(log10(Infected) ~ Day))
title("Confirmed COVID-19 cases in BE, lin & log scales", outer = TRUE, line = -2)
sir <- function(t, y, parms) {
beta <- parms[1]
gamma <- parms[2]
S <- y[1]
I <- y[2]
return(list(c(S = -beta * S * I, I = beta * S * I - gamma * I)))
}
# Population size: 1e6 (1 milliion) or 1e7 (10 millions)
#N <- 1e6
# Rate at which person stays in the infectious compartment (disease specific and tracing specific)
# γ=0.2 corresponding here to an average length of the infective period of 5 days.
gamma <- 1/5
#gamma <- 0.3813767
# Infectious contact rate - beta = R0/N*gamma and when R0 \approx 2.25 then  2.25/N*gamma i.e
# a contact rate of β=0.0000004 means that the contact rate with a given individual is 0.0000004 contacts per day.
beta <- 4.5e-07
#beta <- 0.6186234
# R0 for the beta and gamma values
# Altogether, this leads to an R0 of 2.25, which roughly corresponds to the R0 of SARS-CoV-2
#R0 <- beta*N/gamma
R0 <- beta/gamma
# Load package to numerically solve ODEs
library(deSolve)
# Grid where to evaluate
max_time <- 150
times <- seq(0, max_time, by=0.01)
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
#fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
fit <- data.frame(rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)))
col <- 1:3 # colour
print(fit)
sink('fit1_BE_02052020.txt'); fit; sink()
write.csv(fit, "fit1_BE_02052020.csv")
# Plot infection curve
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
# Solve ODE system using Runge-Kutta numerical method.
ode_solution <- rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)) %>%
as.data.frame() %>%
setNames(c("t", "S", "I")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
ode_solution_daily <- ode_solution %>%
filter(t %in% seq(0, max_time, by = 1)) %>%
mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)
## The epidemic curve of new infections per day is shown below:
df_plot <- ode_solution_daily %>% select(t, c) %>%
pivot_longer(-t, names_to= "Quantity", values_to = "Proportion")
#ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() + xlab("Time (days)") + ylab("Daily new cases (as proportion of the population)") + scale_y_continuous(labels=scales::percent)
ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() +
xlab("Time(d)") + ylab("Daily new cases (%BE pop.)") + scale_y_continuous(labels=scales::percent)
sir <- function(t, y, parms) {
beta <- parms[1]
gamma <- parms[2]
S <- y[1]
I <- y[2]
return(list(c(S = -beta * S * I, I = beta * S * I - gamma * I)))
}
# Population size: 1e6 (1 milliion) or 1e7 (10 millions)
#N <- 1e6
# Rate at which person stays in the infectious compartment (disease specific and tracing specific)
# γ=0.2 corresponding here to an average length of the infective period of 5 days.
gamma <- 1/5
#gamma <- 0.3813767
# Infectious contact rate - beta = R0/N*gamma and when R0 \approx 2.25 then  2.25/N*gamma i.e
# a contact rate of β=0.0000004 means that the contact rate with a given individual is 0.0000004 contacts per day.
beta <- 4.5e-07
#beta <- 0.6186234
# R0 for the beta and gamma values
# Altogether, this leads to an R0 of 2.25, which roughly corresponds to the R0 of SARS-CoV-2
#R0 <- beta*N/gamma
R0 <- beta/gamma
# Load package to numerically solve ODEs
library(deSolve)
# Grid where to evaluate
max_time <- 150
times <- seq(0, max_time, by=0.01)
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
#fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
fit <- data.frame(rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)))
col <- 1:3 # colour
print(fit)
sink('fit1_BE_02052020.txt'); fit; sink()
write.csv(fit, "fit1_BE_02052020.csv")
# Plot infection curve
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
# Plot the ODE system.
## let's try with this sir model and extrapolate to maybe 90 days, via epidemiologic modeling
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
# general optimazion nethod based on Nelder-Mead
# https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
print(Opt_par)
# Grid where to evaluate
max_time <- 150
times <- seq(0, max_time, by=0.01)
# Plot infection curve
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
# BE #Note. count starting as of march 1st when cases>1
Infected <- c(2,8,13,23,50,109,169,200,239,267,314,314,559,689,886,1058,1243,1486,1795,2257,2815,3401,3743,4269,4937,6235,7284,9134,10836,11899,12775,13964,15348,16770,18431,19691,20814,22194,23403,24983,26667,28018,29647,30589,31119,33573,34809,36138,37183,38496,39983,40956,41889,42797,44293,45325,46134,46687,47334,47859,48519,49032)
Day <- 1:(length(Infected)) # length of the infection period
#N <- 66000000 # pupulation of the UK
#N <- 10230000 # pupulation of the SW
#N <- 66990000 # pupulation of the FR
#N <- 32820000 # pupulation of the US
N <- 11460000 # pupulation of the BE
# Plot coutnry's confirmed cases
old <- par(mfrow = c(1, 2))
#plot(Day, Infected, type ="b") # bubbles
plot(Day, Infected, type ="b")
plot(Day, Infected, log = "y") # type b by default
abline(lm(log10(Infected) ~ Day))
# Plot the ODE system.
## let's try with this sir model and extrapolate to maybe 90 days, via epidemiologic modeling
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
# general optimazion nethod based on Nelder-Mead
# https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
print(Opt_par)
# Load package to numerically solve ODEs
library(deSolve)
# Grid where to evaluate
max_time <- 150
times <- seq(0, max_time, by=0.01)
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
#fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
fit <- data.frame(rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)))
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
fit <- data.frame(ode(y = init, times = times, func = SIR, parms = Opt_par))
#fit <- data.frame(rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)))
col <- 1:3 # colour
print(fit)
sink('fit1_BE_02052020.txt'); fit; sink()
write.csv(fit, "fit1_BE_02052020.csv")
# Plot infection curve
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
# BE #Note. count starting as of march 1st when cases>1
Infected <- c(2,8,13,23,50,109,169,200,239,267,314,314,559,689,886,1058,1243,1486,1795,2257,2815,3401,3743,4269,4937,6235,7284,9134,10836,11899,12775,13964,15348,16770,18431,19691,20814,22194,23403,24983,26667,28018,29647,30589,31119,33573,34809,36138,37183,38496,39983,40956,41889,42797,44293,45325,46134,46687,47334,47859,48519,49032)
Day <- 1:(length(Infected)) # length of the infection period
#N <- 66000000 # pupulation of the UK
#N <- 10230000 # pupulation of the SW
#N <- 66990000 # pupulation of the FR
#N <- 32820000 # pupulation of the US
N <- 11460000 # pupulation of the BE
# Plot coutnry's confirmed cases
old <- par(mfrow = c(1, 2))
#plot(Day, Infected, type ="b") # bubbles
plot(Day, Infected, type ="b")
plot(Day, Infected, log = "y") # type b by default
abline(lm(log10(Infected) ~ Day))
# Plot the ODE system.
# Plot the ODE system.
## let's try with this sir model and extrapolate to maybe 90 days, via epidemiologic modeling
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
# general optimazion nethod based on Nelder-Mead
# https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
print(Opt_par)
# Grid where to evaluate
max_time <- 300 # here predictions up to 150 days, i.e + (length(Day)-max_time) beyond length(Day)
times <- seq(0, max_time, by=0.01)
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
#fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
fit <- data.frame(ode(y = init, times = times, func = SIR, parms = Opt_par))
col <- 1:3 # colour
print(fit)
# Plot infection curve
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
legend("bottomright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
legend("bottomright", c("Susceptibles", "Infecteds"), lty = 1, lwd = 1, col = col, inset = 0.05)
# Plot infection curve
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
legend("bottomright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
#legend("bottomright", c("Susceptibles", "Infecteds"), lty = 1, lwd = 1, col = col, inset = 0.05)
title("Predicted 2019-nCoV in BE (worst case), SIR", outer = TRUE, line = -2)
# Solve ODE system using Runge-Kutta numerical method.
ode_solution <- rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)) %>%
as.data.frame() %>%
setNames(c("t", "S", "I")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
ode_solution_daily <- ode_solution %>%
filter(t %in% seq(0, max_time, by = 1)) %>%
mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)
# Solve ODE system using Runge-Kutta numerical method.
# ode_solution <- rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)) %>%
ode_solution <- ode(y = init, times = times, func = SIR, parms = Opt_par) %>%
as.data.frame() %>%
setNames(c("t", "S", "I", "R")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
ode_solution_daily <- ode_solution %>%
filter(t %in% seq(0, max_time, by = 1)) %>%
mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)
# Population size: 1e6 (1 milliion) or 1e7 (10 millions)
#N <- 1e6
# Rate at which person stays in the infectious compartment (disease specific and tracing specific)
# γ=0.2 corresponding here to an average length of the infective period of 5 days.
gamma <- 1/5
#gamma <- 0.3813767
# Infectious contact rate - beta = R0/N*gamma and when R0 \approx 2.25 then  2.25/N*gamma i.e
# a contact rate of β=0.0000004 means that the contact rate with a given individual is 0.0000004 contacts per day.
beta <- 4.5e-07
#beta <- 0.6186234
# R0 for the beta and gamma values
# Altogether, this leads to an R0 of 2.25, which roughly corresponds to the R0 of SARS-CoV-2
#R0 <- beta*N/gamma
R0 <- beta/gamma
# Solve ODE system using Runge-Kutta numerical method.
# ode_solution <- rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)) %>%
ode_solution <- ode(y = init, times = times, func = SIR, parms = Opt_par) %>%
as.data.frame() %>%
setNames(c("t", "S", "I", "R")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
ode_solution_daily <- ode_solution %>%
filter(t %in% seq(0, max_time, by = 1)) %>%
mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)
## The epidemic curve of new infections per day is shown below:
df_plot <- ode_solution_daily %>% select(t, c) %>%
pivot_longer(-t, names_to= "Quantity", values_to = "Proportion")
#ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() + xlab("Time (days)") + ylab("Daily new cases (as proportion of the population)") + scale_y_continuous(labels=scales::percent)
ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() +
xlab("Time(d)") + ylab("Daily new cases (%BE pop.)") + scale_y_continuous(labels=scales::percent)
# Grid where to evaluate
max_time <- 150 # here predictions up to 150 days, i.e + (length(Day)-max_time) beyond length(Day)
# Solve ODE system using Runge-Kutta numerical method.
# ode_solution <- rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)) %>%
ode_solution <- ode(y = init, times = times, func = SIR, parms = Opt_par) %>%
as.data.frame() %>%
setNames(c("t", "S", "I", "R")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
ode_solution_daily <- ode_solution %>%
filter(t %in% seq(0, max_time, by = 1)) %>%
mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)
## The epidemic curve of new infections per day is shown below:
df_plot <- ode_solution_daily %>% select(t, c) %>%
pivot_longer(-t, names_to= "Quantity", values_to = "Proportion")
#ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() + xlab("Time (days)") + ylab("Daily new cases (as proportion of the population)") + scale_y_continuous(labels=scales::percent)
ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() +
xlab("Time(d)") + ylab("Daily new cases (%BE pop.)") + scale_y_continuous(labels=scales::percent)
# TZ
Infected <- c(3,6,6,6,12,12,12,12,13,13,14,14,19,19,20,20,20,20,22,24,24,25,25,32,32,32,49,53,88,94,147,147,170,254,254,284,284,299,299,299,299,299,480,480,480)
Day <- 1:(length(Infected)) # length of the infection period
#N <- 66000000 # pupulation of the UK
#N <- 10230000 # pupulation of the SW
#N <- 66990000 # pupulation of the FR
#N <- 32820000 # pupulation of the US
#N <- 11460000 # pupulation of the BE
N <- 56320000 # pupulation of the TZ
# Plot coutnry's confirmed cases
old <- par(mfrow = c(1, 2))
#plot(Day, Infected, type ="b") # bubbles
plot(Day, Infected, type ="b")
plot(Day, Infected, log = "y") # type b by default
abline(lm(log10(Infected) ~ Day))
title("Confirmed COVID-19 cases in TZ, lin & log scales", outer = TRUE, line = -2)
sir <- function(t, y, parms) {
beta <- parms[1]
gamma <- parms[2]
S <- y[1]
I <- y[2]
return(list(c(S = -beta * S * I, I = beta * S * I - gamma * I)))
}
# Population size: 1e6 (1 milliion) or 1e7 (10 millions)
#N <- 1e6
# Rate at which person stays in the infectious compartment (disease specific and tracing specific)
# γ=0.2 corresponding here to an average length of the infective period of 5 days.
gamma <- 1/5
#gamma <- 0.3813767
# Infectious contact rate - beta = R0/N*gamma and when R0 \approx 2.25 then  2.25/N*gamma i.e
# a contact rate of β=0.0000004 means that the contact rate with a given individual is 0.0000004 contacts per day.
beta <- 4.5e-07
#beta <- 0.6186234
# R0 for the beta and gamma values
# Altogether, this leads to an R0 of 2.25, which roughly corresponds to the R0 of SARS-CoV-2
#R0 <- beta*N/gamma
R0 <- beta/gamma
# Load package to numerically solve ODEs
library(deSolve)
# Grid where to evaluate
max_time <- 150
times <- seq(0, max_time, by=0.01)
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
#fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
fit <- data.frame(rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)))
col <- 1:3 # colour
print(fit)
sink('fit1_TZ_03052020.txt'); fit; sink()
write.csv(fit, "fit1_TZ_03052020.csv")
# Plot infection curve
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
# Solve ODE system using Runge-Kutta numerical method.
ode_solution <- rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)) %>%
#ode_solution <- ode(y = init, times = times, func = SIR, parms = Opt_par) %>%
as.data.frame() %>%
setNames(c("t", "S", "I", "R")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
# Plot the ODE system.
## let's try with this sir model and extrapolate to maybe 90 days, via epidemiologic modeling
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
# general optimazion nethod based on Nelder-Mead
# https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
print(Opt_par)
# Grid where to evaluate
max_time <- 300 # here predictions up to 150 days, i.e + (length(Day)-max_time) beyond length(Day)
times <- seq(0, max_time, by=0.01)
# time in days, prediction to up to 90 days (highly unlikely fact will confirm the hypothesis though)
#fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
fit <- data.frame(ode(y = init, times = times, func = SIR, parms = Opt_par))
col <- 1:3 # colour
print(fit)
sink('fit0_TZ_03052020.txt'); fit; sink()
write.csv(fit, "fit0_TZ_03052020.csv")
# Plot infection curve
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
legend("bottomright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
legend("topright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
# Plot infection curve
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
legend("topright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
# Plot infection curve
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
legend("topright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
#legend("bottomright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
title("Predicted 2019-nCoV in TZ (worst case), SIR", outer = TRUE, line = -2)
points(Day, Infected)
# Plot infection curve
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:3], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
# Plot infection curve
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
legend("topright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
#legend("bottomright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 1, col = col, inset = 0.05)
title("Predicted 2019-nCoV in TZ (worst case), SIR", outer = TRUE, line = -2)
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
# general optimazion nethod based on Nelder-Mead
# https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
print(Opt_par)
# Solve ODE system using Runge-Kutta numerical method.
# ode_solution <- rk4(y = c(N - 10, 10), times = times, func = sir, parms = c(beta, gamma)) %>%
ode_solution <- ode(y = init, times = times, func = SIR, parms = Opt_par) %>%
as.data.frame() %>%
setNames(c("t", "S", "I", "R")) %>%
mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")
ode_solution_daily <- ode_solution %>%
filter(t %in% seq(0, max_time, by = 1)) %>%
mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)
## The epidemic curve of new infections per day is shown below:
df_plot <- ode_solution_daily %>% select(t, c) %>%
pivot_longer(-t, names_to= "Quantity", values_to = "Proportion")
ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() +
xlab("Time(d)") + ylab("Daily new cases (%RW pop.)") + scale_y_continuous(labels=scales::percent)
ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() +
xlab("Time(d)") + ylab("Daily new cases (%TZ pop.)") + scale_y_continuous(labels=scales::percent)
# Function to compute the final size.
s_inf <- function(R0) {
f_target <- function(x) { x - exp(-R0*(1-x)) }
result <- uniroot(f_target, lower=1e-12, upper=1-1e-12)$root
return(result)
}
# Final proportion of infected.
1 - s_inf(R0)
#beta <- 0.6186234
# R0 for the beta and gamma values
# Altogether, this leads to an R0 of 2.25, which roughly corresponds to the R0 of SARS-CoV-2
#R0 <- beta*N/gamma
R0 <- beta/gamma
# Final proportion of infected.
1 - s_inf(R0)
