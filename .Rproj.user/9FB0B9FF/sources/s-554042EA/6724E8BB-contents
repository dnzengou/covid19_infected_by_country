## source: https://github.com/bbolker/bbmisc/blob/master/peak_I_simple.rmd
# https://tinu.shinyapps.io/Flatten_the_Curve/
# https://staff.math.su.se/hoehle/blog/2020/03/16/flatteningthecurve.html


install.packages("tidyverse")
library(tidyverse)

install.packages("pillar")
library(pillar)

install.packages("tidyr")
library(tidyr)

install.packages("tidyverse")
library(tidyverse)

install.packages("dplyr")
library(dplyr)

install.packages("magrittr")
library(magrittr)

library(purrr)

install.packages("ggplot2")
library(ggplot2); theme_set(theme_bw(base_size=16))

######################################################################
# sources: https://raw.githubusercontent.com/hoehleatsu/hoehleatsu.github.io/master/_source/2020-03-16-flatteningthecurve.Rmd
# Function to compute the derivative of the ODE system
#
#  t - time
#  y - current state vector of the ODE at time t
#  parms - Parameter vector used by the ODE system
#
# Returns:
#  list with one component being a vector of length two containing
#  dS(t)/dt and dI(t)/dt
######################################################################


# Germany
# Infected <- c(16, 18, 21, 26, 53, 66, 117, 150, 188, 240, 349, 534, 684, 847, 1112, 1460, 1884, 2369, 3062, 3795, 4838, 6012, 7156, 8198, 10999)

#China
#Infected <- c(45, 62, 121, 198, 291, 440, 571, 830, 1287, 1975, 2744, 4515)

# UK
#Infected <- c(2,2,3,3,4,8,8,9,13,13,19,23,35,40,51,85,114,160,206,271,321,373,456,590,797,1061,1391,1543,1950,2626,3269)

# SW
# Infected <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,7,7,12,14,15,21,35,94,101,161,203,248,355,500,599,814,961,1022,1103,1190,1279,1439,1639,1763,1934,2046,2286,2526,2840,3069,3447,3700,4028,4435,4947,5568,6131,6443,6830,7206,7693,8419,8419)

# FR
# Infected <- c(0,0,2,3,3,3,4,5,5,5,6,6,6,6,6,6,6,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,14,18,38,57,100,130,191,204,285,377,653,949,1126,1209,1784,2281,2281,3661,4469,4499,6633,7652,9043,10871,12612,14282,16018,19856,22304,25233,29155,32964,37575,40174,44550,52128,56989,59105,64338,89953,92839,98010,109069,112950,112950)

# RW
Infected <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,5,7,8,8,17,17,19,36,40,41,50,54,60,70,70,75,82,84,89,102,104,105,105,110,110)
Day <- 1:(length(Infected)) # length of the infection period

# Population size: 1e6 (1 milliion) or 1e7 (10 millions)
#N <- 1e6 

#N <- 66000000 # pupulation of the UK
#N <- 10230000 # pupulation of the SW
#N <- 66990000 # pupulation of the FR
N <- 12210000 # pupulation of the RW

old <- par(mfrow = c(1, 2))
#plot(Day, Infected, type ="b") # bubbles
plot(Day, Infected, type ="b")
plot(Day, Infected, log = "y") # type b by default
abline(lm(log10(Infected) ~ Day))
title("Confirmed COVID-19 cases in RW, lin & log scales", outer = TRUE, line = -2)



SIR <- function(t, y, parms) { # SIR <- function(time, state, parameters), with time=t, state=y
  beta <- parms[1]
  gamma <- parms[2]
  S <- y[1]
  I <- y[2]
  return(list(c(S = -beta * S * I, I = beta * S * I - gamma * I)))
}

# Load package to numerically solve ODEs
library(deSolve)
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
  names(parameters) <- c("beta", "gamma")
  out <- ode(y = init, times = Day, func = SIR, parms = parameters)
  fit <- out[ , 3]
  sum((Infected - fit)^2)
}

# general optimazion nethod based on Nelder-Mead
# https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1)) # optimize with some sensible conditions
Opt$message
## [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
# OR
## [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"

Opt_par <- setNames(Opt$par, c("beta", "gamma"))
print(Opt_par)


# Rate at which person stays in the infectious compartment (disease specific and tracing specific)
# γ=0.2 corresponding here to an average length of the infective period of 5 days.
Opt_par["gamma"] # gamma = 
#gamma <- 1/5 
# Infectious contact rate - beta = R0/N*gamma and when R0 \approx 2.25 then  2.25/N*gamma i.e
# a contact rate of β=0.0000004 means that the contact rate with a given individual is 0.0000004 contacts per day.
Opt_par["beta"] # beta = 
#beta <- 4.5e-07 
# R0 for the beta and gamma values
# Altogether, this leads to an R0 of 2.25, which roughly corresponds to the R0 of SARS-CoV-2
R0 <- beta*N/gamma


## We can now solve the ODE system using the above parameters and an initial number of infectious of, say, 10:



# Grid where to evaluate
max_time <- 150
times <- seq(0, max_time, by=0.01)

# Solve ODE system using Runge-Kutta numerical method, with an initial number of infectious of, say, 10
ode_solution <- rk4(y = c(N - 10, 10), times = times, func = SIR, parms = c(beta, gamma)) %>%
  as.data.frame() %>%
  setNames(c("t", "S", "I")) %>%
  mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "without_intervention")

ode_solution_daily <- ode_solution %>%
  filter(t %in% seq(0, max_time, by = 1)) %>%
  mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)


## The epidemic curve of new infections per day is shown below:
df_plot <- ode_solution_daily %>% select(t, c) %>% 
  pivot_longer(-t, names_to= "Quantity", values_to = "Proportion") 
ggplot(df_plot, aes(x=t, y=Proportion)) + geom_col() + 
  xlab("Time (days)") + ylab("Daily new cases (as proportion of the population)") + scale_y_continuous(labels=scales::percent)


# Function to compute the final size.
s_inf <- function(R0) {
  
  f_target <- function(x) { x - exp(-R0*(1-x)) }
  
  result <- uniroot(f_target, lower=1e-12, upper=1-1e-12)$root
  
  return(result)
}

# Final proportion of infected.
1 - s_inf(R0)


## We can use the above equation to verify that the larger $R_0$, the larger is the final size of the outbreak:
R0_grid <- c(1.25, 1.5, 1.75,2, 2.25, 2.5, 3)
map_dbl( R0_grid, ~ 1-s_inf(.x)) %>% setNames(R0_grid) %>% scales::percent(accuracy=1)


## The two epidemic curves can now be plotted as follows:
sir_with_social_dist <- function(t, y, parms, social_dist_period, reduction) {
  beta0 <- parms[1]
  gamma <- parms[2]
  
  # Reduce contact rate to params[1] * reduction in time period
  beta_t <- if_else(t <= social_dist_period[1], beta0,
                    if_else(t <= social_dist_period[2], beta0 * reduction[1],
                            beta0 * reduction[2]
                    )
  )
  
  S <- y[1]
  I <- y[2]
  
  return(list(c(S = -beta_t * S * I, I = beta_t * S * I - gamma * I)))
}

# Define parameters
social_dist_period <- c(30, 60)
reduction <- c(0.6, 0.8)

# Solve
ode_solution2 <- lsoda(y = c(N - 10, 10), times = times, func = sir_with_social_dist, parms = c(beta, gamma), social_dist_period = social_dist_period, reduction = reduction) %>%
  as.data.frame() %>%
  setNames(c("t", "S", "I")) %>%
  mutate(beta = beta, gama = gamma, R0 = N * beta / gamma, s = S / N, i = I / N, type = "with_intervention")

# Use daily number of new cases
ode_solution2_daily <- ode_solution2 %>%
  filter(t %in% seq(0, max_time, by = 1)) %>%
  mutate(C = if_else(row_number() == 1, 0, lag(S) - S), c = C / N)


#Combine the two solutions into one dataset
ode_df <- rbind(ode_solution_daily, ode_solution2_daily)

ggplot(ode_df, aes(x=t, y=0, xend=t, yend=c, color=type)) + geom_segment(alpha=0.7) + 
  geom_line(aes(x=t, y=c)) + 
  xlab("time") + ylab("Daily new cases") + 
  scale_y_continuous(labels=scales::percent) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  scale_color_brewer(name = "Epidemic model:", type= "qual", palette=1 ) +
  geom_vline(xintercept = social_dist_period, lty=2) #+
#geom_hline(yintercept = 0.02, lty=2, color="steelblue") #+
#geom_text(data=data.frame(t=120, c=0.021, label="Healthcare system capacity",type="without_intervention"), aes(t,c, label=label), color="steelblue")

## The final size in the two cases:
ode_df %>%
  group_by(type) %>%
  filter(row_number() == n()) %>%
  mutate(final_fraction = scales::percent(1 - s, accuracy = 1)) %>%
  select(final_fraction)

## Here we used the very conservative estimates that R0 can be reduced by 60% to 1.35 for a few weeks,hereafter the reduction is 80% of the original R0, i.e. 1.8. Things of course become more optimistic, the larger the reduction is. One danger is although to reduce R0 drastically and then lift the measures too early and too much
# - in this case the outbreak is delayed, but then almost of the same peak size and final size, only later.
# The larger the interventions, if done right and timed right, the smaller the final size. In other words: the spread of an infectious disease in a population is a dynamic phenomena. Time matters. The timing of interventions matters. If done correctly,
# they stretch the outbreak and reduce the final size!
